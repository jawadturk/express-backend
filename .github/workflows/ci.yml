name: ci
run-name: ${{ github.actor }} is learning GitHub Actions
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      IMAGE_NAME: express-backend
      PROJECT_ID: express-backend-411116
      GAR_REPO_NAME: container-images  
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test  

    - name: Authenticate to Google Cloud
      id: auth
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: access_token
        service_account: 'pipline-service-account@express-backend-411116.iam.gserviceaccount.com'
        workload_identity_provider: 'projects/505110449924/locations/global/workloadIdentityPools/my-workload-identity-pool/providers/my-repo'
        access_token_lifetime: 300s

    - name: Login to Artifact Registry
      uses: docker/login-action@v3
      with:
        registry: us-central1-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}    
     
    - id: docker-push-tagged
      name: Tag Docker image and push to Google Artifact Registry
      env:
        GIT_TAG: "1.0.1"
      uses: docker/build-push-action@v5
      with:
        push: true
        file: Dockerfile.prod
        tags: |
             us-central1-docker.pkg.dev/express-backend-411116/container-images/express-backend:${{ env.GIT_TAG }}
             us-central1-docker.pkg.dev/express-backend-411116/container-images/express-backend:latest
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      tf_actions_working_dir: terraform
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    permissions:
      pull-requests: write
      contents: 'read'
      id-token: 'write'
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v3

    - name: Authenticate to Google Cloud
      id: auth
      uses: 'google-github-actions/auth@v1'
      with:
        service_account: 'pipline-service-account@express-backend-411116.iam.gserviceaccount.com'
        workload_identity_provider: 'projects/505110449924/locations/global/workloadIdentityPools/my-workload-identity-pool/providers/my-repo'

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -input=false -backend-config="prefix=terraform/state" -backend-config="bucket=terraform-state-express-backend"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -lock=false
      continue-on-error: true
      
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })    

     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1

     - name: Terraform Apply
       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
       working-directory: terraform
       run: terraform apply -auto-approve -input=false           

      

